///// https://medium.com/quick-code/learning-solidity-with-a-simple-fundraising-smart-contract-2fad8b1d8b73
  
  pragma solidity ^0.5.1;
  // https://medium.com/@adeyemitoluhi
  contract BonusScheme {
      
  /* Bonus Scheme internals */
  address public company;            
  address public employeeAddr;
  uint256 private company_funds;  // company balance
  
  // Defining a struct for an order request 
  struct Order {
    uint order_id;
    address employee;
	uint partner_id;
	uint[] items;
	// uint quantity;
	uint price;
    bool init;
    bool completed;
  }
  
  struct Employee {
	address emp_addr;
	string emp_name;
	// uint balance;  // I will go with a mapping to hold the wallets instead
	ShoppingCart cart;
    bool registered;
	}

  struct ShoppingCart {
    uint[] items;
    uint total;
  }

  struct Partner {
	uint parner_id;
	string parner_name;
	// holds item ids
	uint[] items;
	// item id - number
//	mapping (uint => uint) items;
    bool registered;
	}

  struct Reciept {
	uint orderno;
	address emp_addr;
	}
  
  struct Item {
	// address item_addr;
	uint item_id;
	string name;
	bytes description;
    bool exists;
    uint partner_id;
    uint price;
    uint quantity;
	}

  uint private ordersequence;
  uint private itemsequence;
  uint private partnersequence;

	// Storage variables 
  mapping (address => uint) wallets; 																													// HOLDS EACH EMPLOYEES WALLET BALANCE (ADDRESS USED TO REFER TO THE EMPLOYEE, UINT THEIR BALANCE)
  mapping (uint => Order) orders;
  mapping (uint => Partner) partners;
  mapping (address => Employee) employees;
  mapping (uint => Item) items;
  //mapping (address => Item[]) 																															// THE ADDRESS WILL BE THE ADDRESS OF THE PARTNER
  // mapping (address => Reciept) reciepts; 

  event EmployeeRegistered(address employee);
  event EmployeeRegistrationFailed(address employee);
  event EmployeeRemovedFromRegister(address employee);
  event EmployeeRemovalFailed(address employee);
  event EmployeePaid(address employee, uint amount);
  event EmployeePaymentFailed(address employee);
  
  event ItemRegistered(uint item_id); 
  event ItemRemovedFromRegister(uint item_id);
  event ItemRegistrationFailed(uint item_id);
  event ItemRemovalFailed(uint item_id);
  event ItemIncremented(uint item_id);
  event ItemIncrementFailed(uint item_id);
  
  event PartnerRegistered(uint partner_id);
  event PartnerRegistrationFailed(uint partner_id);
  event PartnerRemovedFromRegister(uint partner_id);
  event PartnerRemovalFailed(uint partner_id);
  
  event ItemInsertedToCart(address employee, uint item_id, uint item_price, uint cart_total);
  event ItemInsertionToCartFailed(address employee, uint item_id);
  event ItemRemovedFromCart(address employee, uint item_id);
  event OrderPlaced(address employee, uint order_total);
  event OrderFailed(address employee, uint employee_balance, uint cart_total);
  event CartEmptied(address employee);


  // event OrderPlaced(uint orderno, address employee, address item, uint total);
  // event RecieptSent(uint orderno);
  // event OrderCancelled(uint orderno);
  // event PaymentSent(address employee, uint orderno, uint amount);
  
  
  // The constructor 
	constructor(address _empAddr) public {
		company = msg.sender;																																			// THE COMPANY IS THE OWNER OF THE CONTRACT ... OR SHOULD THE EMPLOYEE BE THE CONTR
		employeeAddr = _empAddr;
		company_funds = 0;
	}
    
    /**
          @notice Register a new item. In order to register an item, the company that provides it must already be a partner otherwise product registration fails. Only the company can register a new item.
          @param _item_name - item name
          @param _description - item description
          @param _partner_id - address of partner that supplied the item
          @param _price - item price
          @param _quantity - the number of this item that exists
          @return success

    */
    function registerItem(string memory _item_name, bytes memory _description, uint _partner_id, uint _price, uint _quantity) companyOnly isPartner(_partner_id) public returns (bool success) {
        
        itemsequence++;
        Item memory item = Item(itemsequence, _item_name, _description, true, _partner_id, _price, _quantity);
        
        // Check that the item is not already registered, if it is fail. 
        if (!items[itemsequence].exists && checkItemIsValid(item)) {
            items[itemsequence] = item;
            emit ItemRegistered(itemsequence);
            
            return true;
        }
        emit ItemRegistrationFailed(itemsequence);
        
        return false;
    }
    
     /**
          @notice Checks an item is valid. 
          @param item - Item struct
          @return valid
    */
    function checkItemIsValid(Item memory item) pure private returns (bool valid) {
       return (item.price > 0);
    }
    
    /**
          @notice Increment amount of existing item. Only the company can do this. Item must already be registered.
          @param _item_id - item ID
          @param amount - number of item added
          @return success

    */
    function incrementItemInventory(uint _item_id, uint amount) companyOnly public checkItemRegistered(_item_id) returns (bool success) {
            
            Partner memory partner = partners[items[_item_id].partner_id];
            

            items[_item_id].quantity += amount;
            
            for(uint i =0; i < partner.items.length; i++) {
                if(partner.items[_item_id] == _item_id) {
                    items[partner.items[_item_id]].quantity += amount;
                }
            }
            
            emit ItemIncremented(_item_id);
            
            return true;
    }
    
     /**
          @notice Removes an item from the list of availiable items. Only a company can do this.
          @param _item_id - item id
          @return success
    */
    function removeItemFromRegister(uint _item_id) companyOnly public returns (bool success)  {
        
        Item memory item = items[_item_id];
        Partner storage partner = partners[item.partner_id];
        uint index; 
        
        if (item.item_id == _item_id && item.exists) {
            delete items[_item_id];
            
            
            // iterate through and delete the item from the partner's listing of items
            for(uint i = 0; i < partner.items.length; i++) {
                if(partner.items[i] == _item_id) {
                    // remove the item from the partner array // BUT THIS LEAVES A GAP
                    //delete array[index];
                    index = i;
                }
            }
            
            // manually get rid of the gap left by removing the item in the partner's listing of item 
            if (index >= partner.items.length) return false;
            for (uint i = index; i< partner.items.length-1; i++){
                partner.items[i] = partner.items[i+1];
            }
            partner.items.length--;
            
            emit ItemRemovedFromRegister(_item_id);
    
            return true;
      }
      
      emit ItemRemovalFailed(_item_id);

      return false;
    }    
    
    /**
          @notice Registers a new employee of the bonus scheme. Only the company can do this.
          @param _address new employee's address
          @param _emp_name employee's name
          @param _balance employee's account balance
          @return success
    */
    function registerEmployee(address _address, string memory _emp_name, uint _balance) companyOnly public returns (bool success) {
        
        if (_address != address(0)) {
            ShoppingCart memory cart = ShoppingCart(new uint[](0), 0);
            Employee memory employee = Employee(_address, _emp_name, cart, true);
            
            employees[employee.emp_addr] = employee;
            // create employee wallet
            wallets[_address] = _balance;
       
            emit EmployeeRegistered(_address);
            return true;
            }
            
        emit EmployeeRegistrationFailed(_address);
        return false;
    }
    
    /**
        @notice Removes an employee from the bonus scheme, only a company can do this
        @param _employee employee's address
        @return success
    */
    function removeEmployee(address _employee) companyOnly employeeExists(_employee) public returns (bool success) {
        
        Employee memory employee = employees[_employee];
        
        if (employee.emp_addr != address(0)) {
            delete employees[_employee];
            emit EmployeeRemovedFromRegister(_employee);
            return true;
      }
      emit EmployeeRemovalFailed(_employee);
      return false;
    }
    
    
    /**
          @notice Registers a new partner of the bonus scheme. Only the company can do this.
          @param _partner_name partner's name
          @param _items partner's item offerings
          @return success
    */
    function registerPartner(string memory _partner_name,  uint[] memory _items) companyOnly private returns (bool success) {

        require(!partners[partnersequence].registered);
        
        partnersequence++;
        Partner memory partner = Partner(partnersequence, _partner_name, _items, true);
        
        if (!partners[partnersequence].registered) {
            partners[partnersequence] = partner;
            emit PartnerRegistered(partnersequence);
            
            return true;
        }
        emit PartnerRegistrationFailed(partnersequence);
        
        return false;
    }
    
    /**
        @notice Removes a partner company from the bonus scheme, only a company can do this
        @param _partner_id partners's id
        @return success
    */
    function removePartner(uint _partner_id) companyOnly isPartner(_partner_id) public returns (bool success) {
        
        Partner memory partner = partners[_partner_id];
        uint arrayLength = partner.items.length;
                
        if (partner.registered) {
            delete partners[_partner_id];
        
        // delete items with that partner id
        for (uint i = 0; i < arrayLength; i++) {
            delete items[partner.items[i]];
        }
            
        emit PartnerRemovedFromRegister(_partner_id);
        return true;
      }
      
      emit PartnerRemovalFailed(_partner_id);
      return false;
    }    

    /**
        @notice Ad hoc reward payment into employee's balance. Done when company adds reward to employees account.
        @param _employee employee's id
        @param _amount amount to be added to employee's account
        @return success
    */
    function payEmployee(address _employee, uint _amount) companyOnly employeeExists(_employee) public returns (bool success) {
    
        require(_amount > 0);
        
        if(employees[_employee].registered) {
          wallets[_employee] += _amount;
          
          emit EmployeePaid(_employee, _amount);
          return true;
          
        }
        
        emit EmployeePaymentFailed(_employee);
        return false;
    }
    
    
    function safeAdd(uint x, uint y) pure internal returns (uint) {
        uint z = x + y;
        assert(z >= x);
        return z;
    
    }
    
    /**
        @notice Inserts an item into an employee's shopping cart.
        This function returns a boolean and the position of the
        inserted product.
        The positional information can later be used to directly reference
        the product within the mapping. Solidity mappings aren't interable.
        @param _item_id item ID
        @return (success, index_in_prod_map)

    */
    function addItemToCart(uint _item_id) public returns (bool success, uint index_in_prod_map) {
        Employee storage employee = employees[msg.sender];
        Item memory item = items[_item_id];
        uint prods_prev_len = employee.cart.items.length;
        employee.cart.items.push(item.item_id);
        uint curr_total = employee.cart.total;
        employee.cart.total = safeAdd(curr_total, item.price);
        
        if (employee.cart.items.length > prods_prev_len) {

          emit ItemInsertedToCart(msg.sender, _item_id, item.price, employee.cart.total);

          return (true, employee.cart.items.length - 1);
        }
        
        emit ItemInsertionToCartFailed(msg.sender, _item_id);

        return (false, 0);
    }
    
    /**
        @notice Removes an item from the shopping cart
        @param _index_in_prod_map Product's position in the internal mapping
    */

    function removeProductFromCart(uint _index_in_prod_map) employeeOnly public {
      /*if (msg.sender != owner) {*/
        uint[] memory new_items_list = new uint[](employees[msg.sender].cart.items.length - 1);

        uint[] memory employeeItems = employees[msg.sender].cart.items;

        for (uint i = 0; i < employeeItems.length; i++) {

          if (i != _index_in_prod_map) {

            new_items_list[i] = employeeItems[i];

          } else {

            employees[msg.sender].cart.total -= items[employeeItems[i]].price;

            emit ItemRemovedFromCart(msg.sender, employeeItems[i]);

          }

        }

        employees[msg.sender].cart.items = new_items_list;

      /*}*/

    }
    
     /**
        @notice Invokes a checkout process that'll use the current shopping cart to
        transfer balances between the current employee and the company
        @return success

    */
    function checkoutCart() employeeOnly public returns (bool success) {

        Employee memory employee = employees[msg.sender];
        uint paymentTotal = employee.cart.total;
        
        if(wallets[employee.emp_addr] >= paymentTotal && employee.cart.items.length > 0) {
            wallets[employee.emp_addr] -= paymentTotal;
            employee.cart = ShoppingCart(new uint[](0), 0);
            company_funds += paymentTotal;
            emit OrderPlaced(msg.sender, paymentTotal);
            return true;
        }

        emit OrderFailed(msg.sender, wallets[employee.emp_addr], paymentTotal);
        return false;
    }
    
    
    /**
          @notice Empties the shopping cart
          @return success
    */
    function emptyCart() employeeOnly public returns (bool success) {

        Employee memory employee = employees[msg.sender];

        employee.cart = ShoppingCart(new uint[](0), 0);

        emit CartEmptied(employee.emp_addr);

        return true;

    }
    
    /**
        @notice Returns a elements describing a product
        @param _item_id Product ID
        @return (name, description, price, default_amount)
    */
    function getItem(uint _item_id) view public returns (string memory name, bytes memory description, uint price, string memory partner, uint quantity) {
    
       require(items[_item_id].exists);
       return (items[_item_id].name, items[_item_id].description, items[_item_id].price, partners[items[_item_id].partner_id].parner_name, items[_item_id].quantity);

    }

    /**
        @notice Returns a list of product ids and a complete sum.
        The caller address must be a registered customer.
        @return (product_ids, complete_sum)
    */
    function getCart() view public returns (uint[] memory item_ids, uint total) {

      Employee memory employee = employees[msg.sender];

      uint len = employee.cart.items.length;

      uint[] memory ids = new uint[](len);

      for (uint i = 0; i < len; i++) {

        ids[i] = items[i].item_id;

      }

      return (ids, employee.cart.total);

    }
    
    /**
          @notice Returns customer's balance
          @return _balance Customer's balance

    */
    function getBalance() employeeOnly view public returns (uint _balance) {

      return wallets[msg.sender];

    }
    
    /**
          @notice Returns stores's own balance
          @return store_balance Store's current balance

    */
    function getCompanyBalance() companyOnly view public returns (uint) {

      return company_funds;

    }

  ///////////////
  // MODIFIERS //
  ///////////////
  
  modifier companyOnly {
		// A function which can only be executed by the company
  	require(msg.sender == company);
   _;
	}
	
  modifier employeeOnly {
    // A function which can only be executed by an employee
  	require(msg.sender == employeeAddr);
   _;
	}
  
  modifier checkItemAvailiable(uint _item) {
   require(items[_item].exists && items[_item].quantity > 0);
   _;
	}
	

  modifier checkFundsAvailiable(address _employee, uint total) {
   require(wallets[_employee] >= total);
   _;
      
  }
	
  modifier isPartner(uint _partner) {
   require(partners[_partner].registered);
   _;
	}
	
  modifier employeeExists(address _employee) {
   require(employees[_employee].registered);
   _;
	}
	
  modifier checkItemRegistered(uint _item) {
   require(items[_item].exists);
   if(!items[_item].exists) {
    emit ItemIncrementFailed(_item);
   }
    _;
    }


}
